cmake_minimum_required(VERSION 3.17)

# root CMakeLists.txt, specifies option and interface library
project(csio)

if(WIN32)
    if(True)
        add_definitions(-D _WIN32_WINNT=0x0601)
    elseif()
        # We have to set _WIN32_WINNT for Asio
        if(${CMAKE_SYSTEM_VERSION} EQUAL 10) # Windows 10
            add_definitions(-D _WIN32_WINNT=0x0A00)
        elseif(${CMAKE_SYSTEM_VERSION} EQUAL 6.3) # Windows 8.1
            add_definitions(-D _WIN32_WINNT=0x0603)
        elseif(${CMAKE_SYSTEM_VERSION} EQUAL 6.2) # Windows 8
            add_definitions(-D _WIN32_WINNT=0x0602)
        elseif(${CMAKE_SYSTEM_VERSION} EQUAL 6.1) # Windows 7
            add_definitions(-D _WIN32_WINNT=0x0601)
        elseif(${CMAKE_SYSTEM_VERSION} EQUAL 6.0) # Windows Vista
            add_definitions(-D _WIN32_WINNT=0x0600)
        else() # Windows XP (5.1)
            add_definitions(-D _WIN32_WINNT=0x0501)
        endif()
    endif()
endif()

set(${PROJECT_NAME}_VERSION_MAJOR 0 CACHE STRING "major version of memory" FORCE)
set(${PROJECT_NAME}_VERSION_MINOR 7 CACHE STRING "minor version of memory" FORCE)
set(${PROJECT_NAME}_VERSION_PATCH 0 CACHE STRING "patch version of memory" FORCE)
set(${PROJECT_NAME}_VERSION "${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}.${${PROJECT_NAME}_VERSION_PATCH}"
                             CACHE STRING "version of memory" FORCE)

set(OUTPUT_DIRECTORY_DEBUG   ${CMAKE_BINARY_DIR}/debug/)
set(OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/release/)

# 设置C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

#设置二进制文件输出路径
#set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY        ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG   ${OUTPUT_DIRECTORY_DEBUG}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIRECTORY_RELEASE}/lib)
#set(CMAKE_LIBRARY_OUTPUT_DIRECTORY        ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG   ${OUTPUT_DIRECTORY_DEBUG}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIRECTORY_RELEASE}/lib)
#set(CMAKE_RUNTIME_OUTPUT_DIRECTORY        ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${OUTPUT_DIRECTORY_DEBUG}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIRECTORY_RELEASE}/bin)

#设置安装目标路径
if(UNIX AND APPLE)
    include(GNUInstallDirs)
    set(${PROJECT_NAME}_INCLUDE_INSTALL_DIR "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}")
    set(${PROJECT_NAME}_RUNTIME_INSTALL_DIR "${CMAKE_INSTALL_BINDIR}")
    set(${PROJECT_NAME}_LIBRARY_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}")
    set(${PROJECT_NAME}_ARCHIVE_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}")
    set(${PROJECT_NAME}_FRAMEWORK_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}")

    set(${PROJECT_NAME}_CMAKE_CONFIG_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/cmake")
    set(${PROJECT_NAME}_ADDITIONAL_FILES_INSTALL_DIR "${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}")
elseif(WIN32)
    set(${PROJECT_NAME}_INCLUDE_INSTALL_DIR "include/${PROJECT_NAME}")
    set(${PROJECT_NAME}_RUNTIME_INSTALL_DIR "bin")
    set(${PROJECT_NAME}_LIBRARY_INSTALL_DIR "bin")
    set(${PROJECT_NAME}_ARCHIVE_INSTALL_DIR "lib")
    set(${PROJECT_NAME}_FRAMEWORK_INSTALL_DIR "bin")

    set(${PROJECT_NAME}_CMAKE_CONFIG_INSTALL_DIR "share/${PROJECT_NAME}/cmake")
    set(${PROJECT_NAME}_ADDITIONAL_FILES_INSTALL_DIR "share/${PROJECT_NAME}")
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
else()
    message(FATAL_ERROR "Could not set install folders for this platform!")
endif()

# options
option(${PROJECT_NAME}_BUILD_TOOLS "build tool?" ON)
option(${PROJECT_NAME}_BUILD_TESTS "build test?" OFF)
option(${PROJECT_NAME}_BUILD_EXAMPLES "build example?" OFF)

# add subdiretories
add_subdirectory(lib)
add_subdirectory(src)

if(${PROJECT_NAME}_BUILD_TOOLS)
	add_subdirectory(tool)
endif()

if(${PROJECT_NAME}_BUILD_TESTS)
    enable_testing()
	add_subdirectory(test)
endif()

if(${PROJECT_NAME}_BUILD_EXAMPLES)
	add_subdirectory(example)
endif()

# install readme and license
#install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE" "${CMAKE_CURRENT_SOURCE_DIR}/README.md" DESTINATION ${${PROJECT_NAME}_ADDITIONAL_FILES_INSTALL_DIR})
install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/README.md" 
        DESTINATION ${${PROJECT_NAME}_ADDITIONAL_FILES_INSTALL_DIR})

install(TARGETS ${PROJECT_NAME} asio EXPORT ${PROJECT_NAME}Targets 
        RUNTIME   DESTINATION ${${PROJECT_NAME}_RUNTIME_INSTALL_DIR}
        LIBRARY   DESTINATION ${${PROJECT_NAME}_LIBRARY_INSTALL_DIR}
        ARCHIVE   DESTINATION ${${PROJECT_NAME}_ARCHIVE_INSTALL_DIR}
        FRAMEWORK DESTINATION ${${PROJECT_NAME}_FRAMEWORK_INSTALL_DIR})

install(EXPORT ${PROJECT_NAME}Targets 
        DESTINATION ${${PROJECT_NAME}_CMAKE_CONFIG_INSTALL_DIR}
        FILE ${PROJECT_NAME}-config.cmake)


